makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv ## Return a matrix that is the inverse of 'x'
}
# Example
a <- makeCacheMatrix(matrix(c(1:8,15),3,3))
cacheSolve(a)
makeCacheMatrix <- function(x = matrix()) {
z <- NULL # place holder for value
set <- function(y) { # record the value has changed
x <<- y
z <<- NULL
}
get <- function() x # return matrix
setinverse <- function(inverse) z <<- inverse
getinverse <- function() z
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv ## Return a matrix that is the inverse of 'x'
}
# Example
a <- makeCacheMatrix(matrix(c(1:25,50),3,3))
cacheSolve(a)
# Example
a <- makeCacheMatrix(matrix(c(1:8,15),3,3))
cacheSolve(a)
